plugins {
   id 'org.springframework.boot' version '2.7.3'
   id 'io.spring.dependency-management' version '1.0.13.RELEASE'
   id 'com.vaadin' version "${vaadinVersion}"
   id 'org.flywaydb.flyway' version "9.3.0"
   id 'java'
   id 'idea'
   id 'maven-publish'
   id 'com.bmuschko.docker-spring-boot-application' version '8.1.0'
}

group = 'net.steinerworld'
version = getVersion()
sourceCompatibility = '11'

def getVersion() {
   String buildNr = getBuildNr()
   String branchName = getBranchName()
   String tagName = getTagName()
   String ver = "${MAJOR_VERSION}.${MINOR_VERSION}"
   if (tagName != null && !tagName.equals("null")) {
      ver = tagName
   } else if (buildNr == null || branchName == null) {
      ver += "+local"
   } else if ("master".equals(branchName)) {
      ver += "+" + buildNr
   } else {
      ver += "+" + buildNr + "." + branchName.replace('/', '-')
   }
   println "determined version: $ver"
   return ver;
}

def getBranchName() {
   return project.hasProperty('branchName') ? project.property('branchName') : null
}

def getTagName() {
   return project.hasProperty('tagName') ? project.property('tagName') : null
}

def getBuildNr() {
   return project.hasProperty('buildNr') ? project.property('buildNr') : null
}

configurations {
   compileOnly {
      extendsFrom annotationProcessor
   }
}

repositories {
   mavenCentral()
   maven { url "${vaadinAddonsUrl}" }
}

ext {
   set('vaadinVersion', "${vaadinVersion}")
}

dependencies {
   implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
   implementation 'org.springframework.boot:spring-boot-starter-validation'
   implementation 'org.springframework.boot:spring-boot-starter-security'
   implementation 'com.vaadin:vaadin-spring-boot-starter'
   implementation 'com.vaadin:vaadin-core'
   implementation 'org.flywaydb:flyway-core:9.8.2'
   implementation 'com.itextpdf:itextpdf:5.5.13.3'
   compileOnly 'org.projectlombok:lombok'
   developmentOnly 'org.springframework.boot:spring-boot-devtools'
   runtimeOnly 'org.postgresql:postgresql'
   annotationProcessor 'org.projectlombok:lombok'
   testImplementation 'org.springframework.boot:spring-boot-starter-test'

   // addon
   implementation 'com.vaadin.componentfactory:togglebutton:2.0.0'
   implementation 'com.github.appreciated:apexcharts:23.0.0'
}

dependencyManagement {
   imports {
      mavenBom "com.vaadin:vaadin-bom:${vaadinVersion}"
   }
}

vaadin {
   productionMode = true
}

flyway {
   url = 'jdbc:postgresql://localhost:5435/hypnobook'
   user = 'appuser'
   password = 'appuser'
   locations = ['classpath:db/migration']
}
// we need to build classes before we can migrate
flywayMigrate.dependsOn classes

tasks.named('test') {
   useJUnitPlatform()
}

tasks.create('currentVersion') {
   outputs.file("$buildDir/resources/main/version.txt")
   inputs.property('version', project.version)

   doLast {
      project.file("$buildDir/resources/main/version.txt") << "${project.version};" + new Date().format("dd.MM.yyyy HH:mm")
   }
}

publishing {
   publications {
      maven(MavenPublication) {
         groupId group
         from components.java
         artifact("$buildDir/libs/hypnobook-" + version + ".jar")
      }
   }

   repositories {
      maven {
         url 'https://maven.steinerworld.net/repository/maven-releases/'

         credentials {
            username = System.getenv('REPO_USR')
            password = System.getenv('REPO_PSW')
         }
      }
   }
}

docker {
   springBootApplication {
      baseImage = 'azul/zulu-openjdk-alpine:11-latest'
      ports = [9090, 8080]
      images = ["steinerworld/hypnobook:${version}"]
      jvmArgs = ['-Dspring.profiles.active=production', '-Xmx2048m']
      registryCredentials {
         url = '${dockerHubRepository}'
         username = System.getenv('DOCKER_USR')
         password = System.getenv('DOCKER_PSW')
         email = 'michael@steinerworld.net'
      }
   }
}
